<apex:page id="SR_Registration_Sandbox" showHeader="false" standardController="Account">

    <style> 
  
        body { 
        background-color: #FFF; 
        font: 16px/1.4em "Helvetica Neue",Helvetica,Arial,sans-serif;
        line-height: 20.8px;
        } 
        
        input, textarea, select, button {
        font: 16px/1.4em "Helvetica Neue",Helvetica,Arial,sans-serif;
        line-height: 20.8px;
        }
        
        body .bPageBlock, body #bodyCell .bResource .secondaryPalette, body .secondaryPalette.bPageBlock, body .individualPalette .secondaryPalette.bPageBlock, body .bodyDiv .genericTable, body .genericPageBlockTable, body .bodyDiv .bSubBlock, body .bComponentBlock .bPageBlock, body .bMyDashboard .bPageBlock, body.rlHoverFrame .bPageBlock, body.subjectSelectionPopup div.choicesBox, body.lookupTab .secondaryPalette.bPageBlock, body.popupTab .secondaryPalette.bPageBlock, body.UserTagStatsPage .secondaryPalette.bPageBlock {
            background: #FFF;
        }

        .pbButton .FlowFinishBtn
        {
        display:none;
        }
            
        .pbButton .FlowNextBtn
        {
        display:none;
        }

        .pbButtonb .FlowFinishBtn
        {
        display:none;
        }

        .pbButtonb .FlowNextBtn
        {
        color:#0b7577;
        text-align:center;
        }
        
    </style>

    <flow:interview name="Registration"/>

    <apex:form style="display:none" >
        <apex:inputField value="{!Account.C501_Students_Rebuild_Org_Type__c}" id="category"/>
        <apex:inputField id="subcategory" value="{!Account.C501_Students_Rebuild_Org_Sub_Type__c}"/>
    </apex:form>

    <script type="text/javascript">

        function CheckFields()
        {
            <!-- Check Role -->
            SetShowHideState('Screen_Role', 'Screen_Role_Other', 'Roles.Choice6');

            <!-- Check Hear About -->
            SetShowHideState('Screen_HearAbout', 'Screen_HearAbout_Other', 'HearAbout.Choice9');

            <!-- Check Org Type -->
            SetShowHideState('Screen_Organization_Type', 'Screen_Organization_Type_Other', 'OrganizationTypes.Choice4');

            <!-- Check Org SubType -->
            SetShowHideState('Screen_OrgSubType', 'Screen_OrgSubType_Other', 'OrgSubTypes.Choice10', 'OrgSubTypes.Choice11', 'OrgSubTypes.Choice12');
            
            <!-- Check Country -->
            SetShowHideState('Screen_Country', 'Screen_StateProvince', 'Countries.Choice1', 'Countries.Choice2');

            <!-- Check Dependent Fields -->
            SetDependencyField('category', 'subcategory', 'Screen_Organization_Type', 'Screen_OrgSubType');
        }
        
        function SetShowHideState(field, otherfield, comparevalue1, comparevalue2, comparevalue3, comparevalue4)
        {
            var inputField = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + field + '.input');
            var valueField = inputField.value;
            var inputFieldOther = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + otherfield + '.input');
            if (valueField.localeCompare(comparevalue1) == 0
                || valueField.localeCompare(comparevalue2) == 0
                || valueField.localeCompare(comparevalue3) == 0
                || valueField.localeCompare(comparevalue4) == 0) {
                inputFieldOther.style.display = 'block';
            }
            else {
                inputFieldOther.style.display = 'none';
            }
        }

        function SetDependencyField(controllingFieldVF, dependentFieldVF, controllingFieldFlow, dependentFieldFlow)
        {
            // Get default helper text
            var inputDefaultOrgTypeFlow = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + 'Screen_Default_Org_Type.input');
            if (inputDefaultOrgTypeFlow == null) { return; }
            inputDefaultOrgTypeFlow.style.display = 'none';
            var inputDefaultOrgSubTypeFlow = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + 'Screen_Default_Org_Sub_Type.input');
            if (inputDefaultOrgSubTypeFlow == null) { return; }
            inputDefaultOrgSubTypeFlow.style.display = 'none';
            
            // Get Dependent elements
            var inputDependentFieldFlow = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + dependentFieldFlow + '.input');
            if (inputDependentFieldFlow == null) { return; }
            inputDependentFieldFlow.style.display = 'none';

            var inputDependentFieldFlowTemp = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + dependentFieldFlow + 'Temp.input');
            if (inputDependentFieldFlowTemp == null) { return; }
            var inputDependentFieldVF = document.getElementById('{!$CurrentPage.Name}:j_id8:' + dependentFieldVF);
            if (inputDependentFieldVF == null) { return; }
        
            // Get Controlling elements
            var inputControllingFieldVF = document.getElementById('{!$CurrentPage.Name}:j_id8:' + controllingFieldVF);
            if (inputControllingFieldVF == null) { return; }
            var inputControllingFieldFlow = document.getElementById('{!$CurrentPage.Name}:j_id1:i:f:pb:d:' + controllingFieldFlow + '.input');
            if (inputControllingFieldFlow == null) { return; }
            
            var valueControllingFieldVF = inputControllingFieldVF.options[inputControllingFieldVF.selectedIndex].text;
            var valueControllingFieldFlow = inputControllingFieldFlow.options[inputControllingFieldFlow.selectedIndex].text;
            
            if (valueControllingFieldVF != valueControllingFieldFlow) {
            
                for (j = 1; j < inputControllingFieldVF.length; j++) {
        
                    if (setOrgSubTypeDefault && inputControllingFieldVF.options[j].text == inputDefaultOrgTypeFlow.value) {
                    
                        inputControllingFieldFlow.selectedIndex = j - 1;
                        break;
                    }
                }
                
                inputControllingFieldVF.selectedIndex = inputControllingFieldFlow.selectedIndex + 1;
                inputControllingFieldVF.onchange();
                refreshDependent = true;
                
                return;
            }
            
            if (refreshDependent) {
            
                refreshDependent = false;
                
                while (inputDependentFieldFlowTemp.length > 0) {
                    inputDependentFieldFlowTemp.remove(0);
                }
                
                for (i = 1; i < inputDependentFieldVF.length; i++) {

                    for (j = 0; j < inputDependentFieldFlow.length; j++) {
                
                        if (inputDependentFieldFlow.options[j].text == inputDependentFieldVF.options[i].text) {
                        
                            var cloneOption = inputDependentFieldFlow.options[j].cloneNode(true);
                            inputDependentFieldFlowTemp.add(cloneOption, i);

                            if (setOrgSubTypeDefault && inputDefaultOrgSubTypeFlow.value == inputDependentFieldVF.options[i].text) {
                                inputDependentFieldFlowTemp.selectedIndex = i - 1;
                            }
                        }
                    }
                }

                setOrgSubTypeDefault = false;

                return;
            }
        
            var valueDependentFieldFlow = inputDependentFieldFlow.options[inputDependentFieldFlow.selectedIndex].text;
            var valueDependentFieldFlowTemp = inputDependentFieldFlowTemp.options[inputDependentFieldFlowTemp.selectedIndex].text;
                
            if (valueDependentFieldFlow != valueDependentFieldFlowTemp) {
                for (i = 0; i < inputDependentFieldFlow.length; i++) {
                
                    if (valueDependentFieldFlowTemp == inputDependentFieldFlow.options[i].text) {
                        inputDependentFieldFlow.selectedIndex = i;
                        
                        return;
                    }
                }
            }
        }
        
        var checkTimer = setInterval(CheckFields, 100);
        var refreshDependent = false;
        var setOrgSubTypeDefault = true;
    </script>  
    
</apex:page>